<?php
/**
 * Time: 0:38
 */
?>

<h3>Занятие №18. Практика на работу с пользовательскими функциями PHP:</h3>

<?php
echo '<hr><br>';


echo 'Task 1. Сделайте функцию, которая принимает строку на русском языке, а возвращает ее транслит.', "<br><br>";

$translit = [
    'а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd',
    'е' => 'e', 'ё' => 'yo', 'ж' => 'zh', 'з' => 'z', 'и' => 'i',
    'й' => 'y', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n',
    'о' => 'o', 'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't',
    'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'ts', 'ч' => 'ch',
    'ш' => 'sh', 'щ' => 'shch', 'ъ' => '-', 'ы' => 'y', 'ь' => '`',
    'э' => 'e', 'ю' => 'yu', 'я' => 'ya'
];

function get_translate($str, $translit)
{
    $str_translit = '';
    $arr_str = str_split($str, 1);
    foreach ($arr_str as $item) {
        foreach ($translit as $key => $elem) {
            if ($item == $key) {
                $str_translit .= $elem;
            }
        }
    }
    return $str_translit;
}

$str = 'выходной';
echo get_translate($str, $translit);
echo '<hr><br>';


echo 'Task 2. Сделайте функцию, которая возвращает множественное или единственное число 
существительного(noun)...', "<br><br>";

function get_num_noun($int, $noun_1, $noun_2, $noun_3)
{
    if ($int == 1) {
        return $noun_1;
    }
    if ($int > 1 and $int < 5) {
        return $noun_2;
    }
    if ($int >= 5) {
        return $noun_3;
    }
    return false;
}

echo get_num_noun(7, 'апельсин', 'апельсина', 'апельсинов');
echo '<hr><br>';


echo 'Task 3. Найдите все счастливые билеты. Счастливый билет - это билет, в котором сумма первых трех цифр его 
номера равна сумме вторых трех цифр его номера.', "<br><br>";

function happy_number($num)
{
    $arr_num = str_split($num, 1);
    return $arr_num[0] + $arr_num[1] + $arr_num[2] == $arr_num[3] + $arr_num[4] + $arr_num[5];
}

$happy_number = [];
for ($i = 100000; $i <= 999999; $i++) {
    if (happy_number($i)) {
        $happy_number[] = $i;
    }
}
echo 'Раскомментируйте ответ для просмотра результата';
//var_dump($happy_number);
echo '<hr><br>';


echo 'Task 4. Задача: найдите все пары дружественных чисел в промежутке от 1 до 2000. Дружественные числа - два 
различных числа, для которых сумма всех собственных делителей первого числа равна второму числу и наоборот, сумма 
всех собственных делителей второго числа равна первому числу.
Например 220 и 284. Делители для 220 это [1, 2, 4, 5, 10, 11, 20, 22, 44, 55 и 110], сумма делителей равна 284.
Делители для 284 это [1, 2, 4, 71 и 142], их сумма равна 220.', "<br><br>";

// 220 --> [1, 2, 4, 5, 10, 11, 20, 22, 44, 55, 110] == 284
// 284 --> [1, 2, 4, 71, 142]                        == 220

function get_divisors($num) //функция находит все делители заданного числа и возвращает их в виде Массива.
{
    $arr_div = [];
    for ($i = 1; $i < $num; $i++) {
        if ($num % $i == 0) {
            $arr_div[] = $i;
        }
    }
    return $arr_div;
}

function get_sum($arr) //функция параметром принимает массив и возвращает его сумму.
{
    $arr_sum = array_sum(get_divisors($arr));
    return $arr_sum; // получаем сумму элементов массива(состоящего из делителей Введенного! числа)
}

print_r(get_divisors(220)); //проверили правильность работы
echo ' - массив делителей заданного числа', '<br>';
echo get_sum(220);//проверили правильность работы
echo ' - сумма элементов массива делителей заданного числа', '<br><br>';

echo 'Далее закомментировал кусок кода, ибо он долго выполняется.';
/*
$friendly_numbers = [];
for ($i = 1; $i <= 2000; $i++) {
    for ($j = $i; $j <= 2000; $j++) {
        if ($i == get_sum($j) and $j == get_sum($i) and $i != $j) {
            $friendly_numbers[$i] = $j;
        }
    }
}
var_dump($friendly_numbers);
echo ' - все пары дружественных чисел от 1 до 2000';*/
echo '<hr><br>';


?>























